package com.example.pocketscanner.presentation.screens

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.Share
import androidx.compose.material.icons.filled.Star
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalInspectionMode
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.pocketscanner.domain.model.Document
import com.example.pocketscanner.domain.model.Page
import com.example.pocketscanner.ui.components.DetailsTab
import com.example.pocketscanner.ui.components.PreviewTab
import com.example.pocketscanner.ui.components.TextTab
import com.example.pocketscanner.ui.theme.ScannerOrange
import org.koin.androidx.compose.koinViewModel
import org.koin.core.context.GlobalContext
import org.koin.core.context.startKoin

@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)
@Composable
fun DocumentDetailScreen(
    document: Document?,
    navigateBack: () -> Unit,
    selectedTabIndex: Int,
    onTabSelected: (Int) -> Unit,
    viewModel: DocumentDetailViewModel = if (LocalInspectionMode.current) DocumentDetailViewModel() else koinViewModel()
) {
    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = document?.title ?: "Loading...",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = navigateBack) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                    }
                },
                actions = {
                    IconButton(onClick = {}) {
                        Icon(Icons.Default.Share, contentDescription = "Share")
                    }
                    IconButton(onClick = {}) {
                        Icon(Icons.Default.Edit, contentDescription = "Edit")
                    }
                }
            )
        }
    ) { innerPadding ->
        Box(modifier = Modifier.padding(innerPadding)) {
            if (document == null) {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    CircularProgressIndicator()
                }
            } else {
                Column(modifier = Modifier.fillMaxSize()) {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.secondaryContainer),
                        elevation = CardDefaults.cardElevation(2.dp)
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                imageVector = Icons.Default.Star,
                                contentDescription = null,
                                tint = ScannerOrange,
                                modifier = Modifier.size(36.dp)
                            )
                            Spacer(modifier = Modifier.width(16.dp))
                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = "Document Score",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Bold
                                )
                                Text(
                                    text = "${document.score} points earned",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                            }
                            Text(
                                text = "+${document.score}",
                                style = MaterialTheme.typography.headlineSmall,
                                color = ScannerOrange,
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }

                    TabRow(selectedTabIndex = selectedTabIndex) {
                        listOf("Preview", "Details", "Text").forEachIndexed { index, title ->
                            Tab(
                                selected = selectedTabIndex == index,
                                onClick = { onTabSelected(index) },
                                text = { Text(text = title) }
                            )
                        }
                    }

                    when (selectedTabIndex) {
                        0 -> PreviewTab(document, navigateBack)
                        1 -> DetailsTab(document)
                        2 -> TextTab(document)
                    }
                }
            }
        }
    }
}

class DocumentDetailViewModel

@Preview(showBackground = true, widthDp = 360, heightDp = 640)
@Composable
fun DocumentDetailScreenPreview() {
    if (GlobalContext.getOrNull() == null) {
        startKoin { modules(emptyList()) }
    }

    MaterialTheme {
        DocumentDetailScreen(
            document = Document(
                id = "1",
                title = "Sample Document",
                score = 42,
                createdAt = 123123L,
                pages = listOf(
                    Page(id = "page1", imageUri = "https://example.com/image1.jpg", order = 0),
                    Page(id = "page2", imageUri = "https://example.com/image2.jpg", order = 1)
                ),
                format = "pdf",
                tags = listOf("tag1", "tag2")
            ),
            navigateBack = {},
            selectedTabIndex = 0,
            onTabSelected = {}
        )
    }
}